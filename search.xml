<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DB查询优化器</title>
    <url>/2023/04/22/DB%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E5%99%A8/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul>
<li>Motivation</li>
</ul>
<p>查询优化器，是声明式查询语言和有效执行之间的桥梁。<br>由于optimizer存在，使声明式查询语言比指令式查询更好</p>
<ul>
<li>特点</li>
</ul>
<p>没有最优的plan，optimizer都是基于估计值来计算cost，可能会有退化的情况</p>
<ul>
<li>未来发展</li>
</ul>
<p>MySQL用了启发式查询优化器。<br>现状是自适应优化讨论的很火，但实际没有被认真对待落地。<br>预期自适应技术在查询优化领域的应用，会对大数据场景下查询性能带来较大提升</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>DB</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo多客户端备份测试</title>
    <url>/2023/05/01/hexo%E5%A4%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A4%87%E4%BB%BD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="hexo多客户端备份"><a href="#hexo多客户端备份" class="headerlink" title="hexo多客户端备份"></a>hexo多客户端备份</h1><p>hexo环境打包到github，新客户端执行以下步骤即可开始hexo文章编辑：</p>
<ol>
<li>git clone -b hexo <a href="mailto:&#103;&#105;&#x74;&#64;&#x78;&#120;&#x78;&#x2e;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;">&#103;&#105;&#x74;&#64;&#x78;&#120;&#x78;&#x2e;&#103;&#105;&#116;&#104;&#x75;&#98;&#x2e;&#x63;&#x6f;&#x6d;</a> hexo</li>
<li>安装环境包：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
注意这一步不需要执行<code>hexo init</code>，否则会重置远端部署信息</li>
<li>通过命令<code>hexo g</code>和<code>hexo s</code>在本地开启同步下来的静态博客页面</li>
<li>提交步骤<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;修改说明&quot;</span><br><span class="line">git push origin hexo</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Raft学习资料</title>
    <url>/2023/07/08/Raft%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<h1 id="Raft-Index"><a href="#Raft-Index" class="headerlink" title="Raft Index"></a>Raft Index</h1><p><a href="https://raft.github.io/">https://raft.github.io/</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/12/19/%E5%9F%BA%E4%BA%8Eprometheus%20client%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<h1 id="python-client"><a href="#python-client" class="headerlink" title="python client"></a>python client</h1><h2 id="简单demo"><a href="#简单demo" class="headerlink" title="简单demo"></a>简单demo</h2><p>Gauge和带label的Gauge</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> prometheus_client <span class="keyword">import</span> Gauge, start_http_server  </span><br><span class="line">  </span><br><span class="line">SAMPLE_REQUEST_TIME = Gauge(<span class="string">&#x27;sample_request_time&#x27;</span>, <span class="string">&#x27;a sample metric for request time generated by random number&#x27;</span>)  </span><br><span class="line">SAMPLE_HOST_REQUEST_TIME = Gauge(<span class="string">&#x27;sample_host_request_time&#x27;</span>, <span class="string">&#x27;a sample metric for request time labeled by host&#x27;</span>, [<span class="string">&#x27;host&#x27;</span>])  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  </span><br><span class="line">    start_http_server(<span class="number">8888</span>)  </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  </span><br><span class="line">        SAMPLE_REQUEST_TIME.<span class="built_in">set</span>(random.randint(<span class="number">0</span>, <span class="number">100</span>))  </span><br><span class="line">        SAMPLE_HOST_REQUEST_TIME.labels(host=<span class="string">&#x27;sample_host&#x27;</span>).<span class="built_in">set</span>(random.randint(<span class="number">1</span>, <span class="number">10</span>))  </span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<p>指标采集效果<br><img src="https://picture-bed-1300530554.cos.ap-nanjing.myqcloud.com/pictures/20231219005822.png"></p>
<h1 id="golang-client"><a href="#golang-client" class="headerlink" title="golang client"></a>golang client</h1>]]></content>
  </entry>
</search>
